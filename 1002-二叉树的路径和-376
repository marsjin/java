public class Solution {
    /**
     * @param root the root of binary tree
     * @param target an integer
     * @return all valid paths
     */
    public List<List<Integer>> binaryTreePathSum(TreeNode root, int target) {
        // Write your code here
        List<Integer> path = new ArrayList<Integer>();
        List<List<Integer>> result = new ArrayList<List<Integer>>();

        search(root , target , path , result);
        return result;
    }

    private void search(TreeNode root , int target , List<Integer> path ,
        List<List<Integer>> result){
        if (root == null){
            return;
        }
        if (root.left == null && root.right == null && root.val == target){
            path.add(root.val);
            result.add(path);
            return;
        }
        if (root.left != null){
            List<Integer> left = new ArrayList<Integer>(path);
            left.add(root.val);
            search(root.left , target - root.val , left , result);
        }
        if (root.right != null){
            List<Integer> right = new ArrayList<Integer>(path);
            right.add(root.val);
            search(root.right , target - root.val , right , result);
        }
    }
}
